(function () {
'use strict';

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};



var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};

var Loop = function () {
    /**
     *
     */
    function Loop() {
        classCallCheck(this, Loop);

        this.loopTimer = null;
        this.loopFuncs = [];
    }

    /**
     * Add function to execute per tick.
     *
     * @param {Function} func
     */


    createClass(Loop, [{
        key: "onTick",
        value: function onTick(func) {
            this.loopFuncs.push(func.bind(this));
        }

        /**
         * Perform one iteration of the loop.
         */

    }, {
        key: "tick",
        value: function tick() {
            this.loopTimer = setTimeout(this.tick.bind(this), 20);
            this.loopFuncs.forEach(function (func) {
                func();
            });
        }

        /**
         * Start the loop.
         */

    }, {
        key: "start",
        value: function start() {
            if (this.loopTimer === null) {
                this.loopTimer = setTimeout(this.tick.bind(this), 20);
            }
        }

        /**
         * Stop the loop.
         */

    }, {
        key: "stop",
        value: function stop() {
            if (this.loopTimer !== null) {
                clearTimeout(this.loopTimer);
            }
        }
    }]);
    return Loop;
}();

var Shape = function () {

    /**
     * @param {{ posX: Number, posY: Number, angle: Number, speed: Number, gravity: Number, elasticity: Number, friction: Number }} data
     */
    function Shape() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { posX: 0, posY: 0, angle: 0, speed: 0, gravity: 0, elasticity: 0, friction: 0 };
        classCallCheck(this, Shape);

        this.init(data);
        this.setState(data);
    }

    /**
     * Get the state of the shape.
     *
     * @returns {{
     *      posX: Number,
     *      posY: Number,
     *      velX: Number,
     *      velY: Number,
     *      speed: Number,
     *      gravity: Number,
     *      elasticity: Number,
     *      friction: Number
     * }}
     */


    createClass(Shape, [{
        key: "getState",
        value: function getState() {
            return this.state;
        }

        /**
         * Set the state of the shape.
         *
         * @param {{
         *      posX: Number,
         *      posY: Number,
         *      velX: Number,
         *      velY: Number,
         *      speed: Number,
         *      gravity: Number,
         *      elasticity: Number,
         *      friction: Number
         * }} state
         */

    }, {
        key: "setState",
        value: function setState(state) {
            this.state = state;
        }

        /**
         * Get the specified param by key.
         *
         * @param {String} param
         * @returns {*}
         */

    }, {
        key: "getParam",
        value: function getParam(param) {
            return this.state[param];
        }

        /**
         * Set a value of specified param by key.
         *
         * @param param
         * @param value
         */

    }, {
        key: "setParam",
        value: function setParam(param, value) {
            this.state[param] = value;
        }

        /**
         * Init shape data.
         *
         * @param {*} data
         */

    }, {
        key: "init",
        value: function init(data) {}
        // to be inherited


        /**
         * Update shape position.
         *
         * @param {Element} canvas
         */

    }, {
        key: "update",
        value: function update(canvas) {}
        // to be inherited


        /**
         * Draw shape.
         *
         * @param {Element} ctx
         */

    }, {
        key: "draw",
        value: function draw(ctx) {
            // to be inherited
        }
    }]);
    return Shape;
}();

var Ball = function (_Shape) {
    inherits(Ball, _Shape);

    /**
     * @override
     */
    function Ball(data) {
        classCallCheck(this, Ball);
        return possibleConstructorReturn(this, (Ball.__proto__ || Object.getPrototypeOf(Ball)).call(this, data));
    }

    /**
     * @override
     */


    createClass(Ball, [{
        key: 'init',
        value: function init(data) {
            // translate angle to vector
            var radians = data.angle * Math.PI / 180;
            data.velX = Math.cos(radians) * data.speed;
            data.velY = Math.sin(radians) * data.speed;
        }

        /**
         * @override
         */

    }, {
        key: 'update',
        value: function update(canvas) {
            // get the current state of the ball
            var _getState = this.getState(),
                posX = _getState.posX,
                posY = _getState.posY,
                velX = _getState.velX,
                velY = _getState.velY,
                gravity = _getState.gravity,
                elasticity = _getState.elasticity,
                friction = _getState.friction;

            // apply friction and gravity


            velX -= velX * friction;
            velY += gravity;

            // make sure the friction won't start pushing the ball in reverse direction
            if (velX < friction && velX > -friction) {
                velX = 0;
            }

            // check vertical borders restrictions
            if (posX + 6 >= canvas.width) {
                posX = canvas.width - 6;
                velX = -velX;
            } else if (posX <= 0) {
                posX = 0;
                velX = -velX;
            }

            // check horizontal borders restrictions
            if (posY + 6 >= canvas.height) {
                posY = canvas.height - 6;
                velY = -velY * elasticity;
            } else if (posY <= 0) {
                posY = 0;
                velY = -velY * elasticity;
            }

            // set the new velocity
            this.setParam('velX', velX);
            this.setParam('velY', velY);

            // calculate new position
            posX += velX;
            posY += velY;

            // persist new position
            this.setParam('posX', posX);
            this.setParam('posY', posY);
        }

        /**
         * @override
         */

    }, {
        key: 'draw',
        value: function draw(ctx) {
            ctx.beginPath();
            ctx.arc(this.getParam('posX'), this.getParam('posY'), 3, 0, Math.PI * 2, false);
            ctx.fillStyle = 'blue';
            ctx.fill();
            ctx.closePath();
        }
    }]);
    return Ball;
}(Shape);

var Canvas = function () {
    /**
     * @param {Element} canvas
     * @param {Loop} loop
     */
    function Canvas(canvas, loop) {
        classCallCheck(this, Canvas);

        if (canvas.nodeName !== 'CANVAS') {
            throw new Error('Passed element which is not canvas.');
        }

        this.canvas = canvas;
        this.context = canvas.getContext("2d");
        this.objs = [];

        loop.onTick(this.draw.bind(this));
    }

    /**
     * Return canvas element.
     *
     * @returns {Element}
     */


    createClass(Canvas, [{
        key: 'getCanvas',
        value: function getCanvas() {
            return this.canvas;
        }

        /**
         * Return canvas' context.
         *
         * @returns {Element}
         */

    }, {
        key: 'getContext',
        value: function getContext() {
            return this.context;
        }

        /**
         * @param {*} shape
         */

    }, {
        key: 'addElement',
        value: function addElement(shape) {
            this.objs.push(shape);
        }

        /**
         *
         */

    }, {
        key: 'draw',
        value: function draw() {
            var canvas = this.canvas;
            var ctx = this.context;
            var w = canvas.width;
            var h = canvas.height;

            // Clean
            ctx.clearRect(0, 0, w, h);

            // Update Shapes
            this.objs.forEach(function (shape) {
                shape.update(canvas);
            });

            // Draw Shapes
            this.objs.forEach(function (shape) {
                shape.draw(ctx);
            });
        }
    }]);
    return Canvas;
}();

var App =
/**
 * @param {Array} args
 */
function App(args) {
    classCallCheck(this, App);

    var loop = new Loop();
    var canvas = new Canvas(args, loop);
    var context = canvas.getContext();

    canvas.getCanvas().addEventListener('click', function (e) {
        canvas.addElement.call(canvas, new Ball({
            posX: e.pageX,
            posY: e.pageY,
            angle: Math.floor(-Math.random() * 140 - 20),
            speed: Math.floor(2 + Math.random() * 8),
            gravity: 0.1,
            elasticity: 0.4,
            friction: 0.01
        }));
    }, false);

    loop.start();
};

/**
 * Run application after everything is loaded.
 */


window.addEventListener('load', function () {

    var canvas = document.getElementById('playground');
    canvas.height = window.innerHeight;
    canvas.width = window.innerWidth;
    window.app = new App(canvas);
}, false);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
